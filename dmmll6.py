# -*- coding: utf-8 -*-
"""DMMLL6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qHHX1NNBYqlk-ZYnfS8a2AVmhKSrqmxN
"""

import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt

from sklearn import model_selection
from sklearn.ensemble import BaggingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report,f1_score



df=pd.read_csv("diabetes.csv")

df.columns

df.shape

df.tail()

df.head(6)

df.isnull().sum()

sns.countplot(x=df.Outcome)
plt.title("Plotting the count of patient with Diabetes")
plt.show()

df.Outcome.value_counts()

f,ax = plt.subplots(figsize=(9, 9))
sns.heatmap(df.corr(), annot=True,ax=ax, cmap='flare')
plt.show()

# First we will split our data in X and y

X = df.drop('Outcome', axis=1)
y = df['Outcome']

# Now we will split our data into training and testing part

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
kfold = model_selection.KFold(n_splits = 3)

# initialize the base classifier
base_cls = DecisionTreeClassifier()
  
# no. of base classifier
num_trees = 200
  
# bagging classifier
model = BaggingClassifier(base_estimator = base_cls,
                          n_estimators = num_trees)

model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Checking the Accuaracy of the model

acc = model_selection.cross_val_score(model, X_train, y_train, cv = kfold)
print("accuracy :",acc.mean())

# Confusion Matrix

confusion_matrix(y_test, y_pred)

# Plotting the confusion Matrix

cm = confusion_matrix(y_test, y_pred, labels=model.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=model.classes_)
disp.plot()
plt.show()

# Generating the Classification Report using Sklearn

print(classification_report(y_test, y_pred))

